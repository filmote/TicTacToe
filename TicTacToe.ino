#include <Arduboy2.h>
#include <ArduboyTones.h>


#define MODE_SELECTION      1
#define MODE_2_PLAYER       2
#define MODE_PLAY_COMPUTER  3
#define MODE_SPLASH_SCREEN  4


// -- Images ----------------------------------------------------------------------------------------------------

const uint8_t PROGMEM cross[] = {
16, 16,
0x04, 0x0E, 0x1F, 0x3E, 0x7C, 0xF8, 0xF0, 0xE0, 0xE0, 0xF0, 0xF8, 0x7C, 0x3E, 0x1F, 0x0E, 0x04,
0x20, 0x70, 0xF8, 0x7C, 0x3E, 0x1F, 0x0F, 0x07, 0x07, 0x0F, 0x1F, 0x3E, 0x7C, 0xF8, 0x70, 0x20,
};

const uint8_t PROGMEM nought[] = {
16, 16,
0xE0, 0xF8, 0xFC, 0xFE, 0x3E, 0x1F, 0x0F, 0x0F, 0x0F, 0x0F, 0x1F, 0x3E, 0xFE, 0xFC, 0xF8, 0xE0,
0x07, 0x1F, 0x3F, 0x7F, 0x7C, 0xF8, 0xF0, 0xF0, 0xF0, 0xF0, 0xF8, 0x7C, 0x7F, 0x3F, 0x1F, 0x07,
};

const unsigned char PROGMEM spashScreen[] = {
128, 64,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0xe0, 0x70, 0x30, 0x38, 0x18, 0x58, 0xe0, 0xf0, 0xf0, 0xf8, 0xf8, 0xf8, 0xf0, 0xf0, 0xe0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xf8, 0xfe, 0xff, 0xff, 0xff, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xf8, 0xf0, 0xf0, 0xe0, 0xe0, 0xe0, 0xe0, 0xc0, 0xe0, 0xe0, 0xe0, 0xf0, 0x7f, 0x3f, 0x1f, 0x1f, 0x0f, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x03, 0x07, 0x07, 0x07, 0x0f, 0x0f, 0x07, 0x07, 0x07, 0x03, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0x7c, 0x3c, 0x3c, 0x3c, 0x7c, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0x7c, 0x3c, 0x1c, 0x0c, 0xdc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 
0xff, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xf8, 0xf0, 0xe0, 0xc0, 0x80, 0x80, 0x00, 0x01, 0x03, 0x07, 0x0f, 0x1f, 0x3f, 0x1f, 0x1f, 0x0f, 0x07, 0x03, 0x03, 0x81, 0xc0, 0xe0, 0xf0, 0xf8, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0x70, 0x76, 0x76, 0xf9, 0xff, 0xd8, 0xd7, 0xd7, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0x3f, 0x1f, 0x0f, 0x06, 0x00, 0x00, 0x80, 0xc0, 0xc0, 0x80, 0x80, 0x00, 0x00, 0x02, 0x07, 0x07, 0x0f, 0x1f, 0x3f, 0x3f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xe0, 0xfb, 0xfb, 0xe4, 0xff, 0xb1, 0xaf, 0xaf, 0xc1, 0xff, 0xf3, 0xed, 0xed, 0xe1, 0xef, 0xfd, 0xe1, 0xfb, 0xfd, 0xe3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x43, 0x01, 0x80, 0xc0, 0xe0, 0xf0, 0xf8, 0xfc, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfc, 0xfc, 0xf8, 0xf0, 0xe0, 0xe0, 0xe0, 0xe0, 0xf0, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
};


// -- Sounds ----------------------------------------------------------------------------------------------------

const uint16_t winner[] PROGMEM = {
NOTE_FS5,498, NOTE_REST,144, NOTE_FS5,34, NOTE_REST,72, NOTE_FS5,34, NOTE_REST,72, NOTE_FS5,177,
NOTE_REST,108, NOTE_FS5,105, NOTE_REST,36, NOTE_FS5,70, NOTE_REST,72, NOTE_GS5,105, NOTE_REST,36, NOTE_AS5,105,
NOTE_REST,36, NOTE_B5,1034, NOTE_REST,251, NOTE_B5,105, NOTE_REST,36, NOTE_CS6,70, NOTE_REST,72, NOTE_DS6,70,
NOTE_REST,72, NOTE_F6,605, NOTE_REST,36, NOTE_F6,34, NOTE_REST,72, NOTE_F6,34, NOTE_REST,72, NOTE_F6,34,
NOTE_REST,179, NOTE_CS6,177, NOTE_REST,36, NOTE_F6,70, NOTE_REST,72, NOTE_FS6,117, NOTE_REST,24, NOTE_GS6,105,
NOTE_REST,36, NOTE_FS6,1641,
TONES_END
};

const uint16_t playTurn[] PROGMEM = {
  NOTE_C3, 100, NOTE_A4, 25,
  NOTE_B4, 40, NOTE_A4, 15,
  TONES_END
};


// -- The Game ----------------------------------------------------------------------------------------------------

Arduboy2 arduboy;
ArduboyTones sound(arduboy.audio.enabled);

byte board[3][3];

byte whosTurn = 1;
byte playerX = 1;
byte playerY = 1;
byte showWinner = 0;
byte player1Counter = 0;
byte player2Counter = 0;


byte menuSelection = 1;
byte mode = MODE_SPLASH_SCREEN;


// ---------------------------------------------------------------------------------------------

void checkForWinner() {


  // Check columns to see if player has won ?
  
  for (int x = 0; x < 3 ; x = x + 1) {
    
    if (board[x][0] == whosTurn and board[x][1] == whosTurn and board[x][2] == whosTurn) {
      
      weHaveAWinner();

    }
    
  }


  // Check rows to see if player has won ?

  for (int y = 0; y < 3 ; y = y + 1) {
    
    if (board[0][y] == whosTurn and board[1][y] == whosTurn and board[2][y] == whosTurn) {

      weHaveAWinner();

    }
    
  }


  // Check diagonals to see if player has won ?

  if (board[0][0] == whosTurn and board[1][1] == whosTurn and board[2][2] == whosTurn) {

      weHaveAWinner();

  }

  if (board[0][2] == whosTurn and board[1][1] == whosTurn and board[2][0] == whosTurn) {

      weHaveAWinner();

  }



  // Is it a draw ?

  if (showWinner == 0) {

    showWinner = 3;

    for (int x = 0; x < 3 ; x = x + 1) {

      for (int y = 0; y < 3 ; y = y + 1) {
  
        if (board[x][y] == 0) { showWinner = 0; }
  
      }
    
    }

  }
  
}


// ---------------------------------------------------------------------------------------------

void weHaveAWinner() {
  
  showWinner = whosTurn;
  sound.tones(winner);
  
  if (whosTurn == 1) { player1Counter = player1Counter + 1; }
  if (whosTurn == 2) { player2Counter = player2Counter + 1; }

}


// ---------------------------------------------------------------------------------------------

void drawBoard() {


  // Draws the lines ..
  
  arduboy.fillRect(19, 0, 2, 64, WHITE);
  arduboy.fillRect(41, 0, 2, 64, WHITE);
  arduboy.fillRect(0, 19, 64, 2, WHITE);
  arduboy.fillRect(0, 41, 64, 2, WHITE);


  // Draw existing noughts and crosses ..
  
  for (int x = 0; x < 3 ; x = x + 1) {

    for (int y = 0; y < 3 ; y = y + 1) {

      if (board[x][y] == 1) {

        Sprites::drawOverwrite(1 + (x * 22), 1 + (y * 22), cross, 0);

      }

      if (board[x][y] == 2) {

        Sprites::drawOverwrite(1 + (x * 22), 1 + (y * 22), nought, 0);

      }

    }
  
  }
  
  
  // Draws cursor ..  
  
  arduboy.drawRect((playerX * 22), (playerY * 22), 18, 18);
  
}


// ---------------------------------------------------------------------------------------------

void clearBoard() {
  
  
  // Clear the board ..
  
  for (int x = 0; x < 3 ; x = x + 1) {

    for (int y = 0; y < 3 ; y = y + 1) {

      board[x][y] = 0;

    }
  
  }
  
}

// ---------------------------------------------------------------------------------------------

void setup() {
  
  arduboy.begin();

}


// ---------------------------------------------------------------------------------------------

void loop() {

  if (mode == MODE_SPLASH_SCREEN) {
    loopSplashScreen();  
  }
  
  if (mode == MODE_SELECTION) {
    whosTurn = 1;
    player1Counter = 0;
    player2Counter = 0;
    clearBoard();
    loopSelection();
  }

  if (mode == MODE_2_PLAYER) {
    loop2Player();
  }
  
  if (mode == MODE_PLAY_COMPUTER) {
    loopPlayComputer();
  }
  
}


void loopSplashScreen() {

  arduboy.clear();
  arduboy.pollButtons();

  Sprites::drawOverwrite(0, 0, spashScreen, 0);

  if (arduboy.justPressed(A_BUTTON)) {

    mode = MODE_SELECTION;
    
  }


  // Update the screen ..

  arduboy.display();
  
}

void loopSelection() {

  arduboy.clear();
  arduboy.pollButtons();

  arduboy.setCursor(16, 16);
  arduboy.print("Two Players");

  arduboy.setCursor(16, 32);
  arduboy.print("Play Computer");

  if (menuSelection == 1) {

    arduboy.drawRect(13, 13, 100, 13);
    
  }

  if (menuSelection == 2) {

    arduboy.drawRect(13, 29, 100, 13);
    
  }
  

  // Handle up, down and select buttons ..
  
  if (arduboy.justPressed(UP_BUTTON) and menuSelection == 2)     { menuSelection = 1; }
  if (arduboy.justPressed(DOWN_BUTTON) and menuSelection == 1)   { menuSelection = 2; }

  if (arduboy.justPressed(A_BUTTON)) {

    if (menuSelection == 1) { mode = MODE_2_PLAYER; }
    if (menuSelection == 2) { mode = MODE_PLAY_COMPUTER; }
    
  }


  // Update the screen ..

  arduboy.display();

}


// ---------------------------------------------------------------------------------------------

void loop2Player() {

  arduboy.clear();
  arduboy.pollButtons();


  // Draw the baord ..
  
  drawBoard();



  // Who's turn?

  if (whosTurn == 1) {
    arduboy.setCursor(80, 0);
    arduboy.print("Player 1");
  }
  else {
    arduboy.setCursor(80, 0);
    arduboy.print("Player 2");
  }

  arduboy.setCursor(86, 56);
  arduboy.print(player1Counter);
  arduboy.print(" - ");
  arduboy.print(player2Counter);
  


  // Handle players buttons ..

  if (showWinner == 0) {
    
    if (arduboy.justPressed(LEFT_BUTTON) and playerX > 0)   { playerX = playerX - 1; }
    if (arduboy.justPressed(RIGHT_BUTTON) and playerX < 2)  { playerX = playerX + 1; }
  
    if (arduboy.justPressed(UP_BUTTON) and playerY > 0)     { playerY = playerY - 1; }
    if (arduboy.justPressed(DOWN_BUTTON) and playerY < 2)   { playerY = playerY + 1; }

    if (arduboy.justPressed(B_BUTTON)) { mode = MODE_SELECTION; }

    if (arduboy.justPressed(A_BUTTON)) {
      
      if (board[playerX][playerY] == 0)   { 
  
        board[playerX][playerY] = whosTurn;
        sound.tones(playTurn); 

  
        checkForWinner();


        // If the current player has not won then it's the other players turn ..
        
        if (showWinner == 0) { 

          if (whosTurn == 1) {
            whosTurn = 2;
          }
          else {
            whosTurn = 1;
          }
             
        }
  
      }
      else {
        
        arduboy.digitalWriteRGB(RED_LED, RGB_ON);
        arduboy.delayShort(100);
        arduboy.digitalWriteRGB(RED_LED, RGB_OFF);
  
      }
      
      
    }

  }
    

  // Should we show the winner or draw message ?
  
  if (showWinner != 0) {

    if (showWinner == 1 or showWinner == 2) {
      
      arduboy.setCursor(80, 12);
      arduboy.print("Winner !");
  
      if (showWinner == 1) { Sprites::drawOverwrite(93, 30, cross, 0); }
      if (showWinner == 2) { Sprites::drawOverwrite(93, 30, nought, 0); }

    }
    else {
      
      arduboy.setCursor(80, 12);
      arduboy.print(" Draw !");

    }

    if (arduboy.justPressed(B_BUTTON)) {

      showWinner = 0;
      clearBoard();
  

      // The loser can start the next game ..
      
      if (whosTurn == 1) {
        whosTurn = 2;
      }
      else {
        whosTurn = 1;
      }
      
    }
    
  }


  // Update the screen ..

  arduboy.display();
  
}

void loopPlayComputer() {

  byte someoneHadATurn = 0;
  arduboy.clear();
  arduboy.pollButtons();


  // Draw the baord ..
  
  drawBoard();


  // Who's turn?

  if (whosTurn == 1) {
    arduboy.setCursor(80, 0);
    arduboy.print("Player 1");
  }
  else {
    arduboy.setCursor(80, 0);
    arduboy.print("Computer");
  }

  arduboy.setCursor(86, 56);
  arduboy.print(player1Counter);
  arduboy.print(" - ");
  arduboy.print(player2Counter);
  


  // Handle players buttons ..

  if (showWinner == 0) {


    // Player's turn ..
    
    if (arduboy.justPressed(LEFT_BUTTON) and playerX > 0)   { playerX = playerX - 1; }
    if (arduboy.justPressed(RIGHT_BUTTON) and playerX < 2)  { playerX = playerX + 1; }
  
    if (arduboy.justPressed(UP_BUTTON) and playerY > 0)     { playerY = playerY - 1; }
    if (arduboy.justPressed(DOWN_BUTTON) and playerY < 2)   { playerY = playerY + 1; }

    if (arduboy.justPressed(B_BUTTON)) { mode = MODE_SELECTION; }

    if (arduboy.justPressed(A_BUTTON)) {
      
      if (board[playerX][playerY] == 0)   { 
  
        board[playerX][playerY] = whosTurn;
        sound.tones(playTurn); 
        someoneHadATurn = 1;

      }
      else {
        
        arduboy.digitalWriteRGB(RED_LED, RGB_ON);
        arduboy.delayShort(100);
        arduboy.digitalWriteRGB(RED_LED, RGB_OFF);
  
      }

    }


    // Computers Turn ..

    // Can the cooputer win ?

    if (whosTurn == 2) {
      
      byte moveX = 0;
      byte moveY = 0;
      byte winner = 0;
      byte block = 0;
      
      for (int x = 0; x < 3 ; x = x + 1) {
  
        if (board[x][0] == 2 && board[x][1] == 2 && board[x][2] == 0) { moveX = x; moveY = 2; winner = 1; }
        if (board[x][0] == 2 && board[x][1] == 0 && board[x][2] == 2) { moveX = x; moveY = 1; winner = 1; }
        if (board[x][0] == 0 && board[x][1] == 2 && board[x][2] == 2) { moveX = x; moveY = 0; winner = 1; }
  
      }
      
      for (int y = 0; y < 3 ; y = y + 1) {
  
        if (board[0][y] == 2 && board[1][y] == 2 && board[2][y] == 0) { moveX = 2; moveY = y; winner = 1; }
        if (board[0][y] == 2 && board[1][y] == 0 && board[2][y] == 2) { moveX = 1; moveY = y; winner = 1; }
        if (board[0][y] == 0 && board[1][y] == 2 && board[2][y] == 2) { moveX = 0; moveY = y; winner = 1; }
  
      }
  
  
      if (board[2][0] == 2 && board[1][1] == 2 && board[0][2] == 0) { moveX = 0; moveY = 2; winner = 1; }
      if (board[2][0] == 2 && board[1][1] == 0 && board[0][2] == 2) { moveX = 1; moveY = 1; winner = 1; }
      if (board[2][0] == 0 && board[1][1] == 2 && board[0][2] == 2) { moveX = 2; moveY = 0; winner = 1; }
  
      if (board[0][0] == 2 && board[1][1] == 2 && board[2][2] == 0) { moveX = 2; moveY = 2; winner = 1; }
      if (board[0][0] == 2 && board[1][1] == 0 && board[2][2] == 2) { moveX = 1; moveY = 1; winner = 1; }
      if (board[0][0] == 0 && board[1][1] == 2 && board[2][2] == 2) { moveX = 0; moveY = 0; winner = 1; }
  
      if (winner == 1) {
  
          board[moveX][moveY] = 2;
          someoneHadATurn = 1;
  
      }
      else {
    
        for (int x = 0; x < 3 ; x = x + 1) {
    
          if (board[x][0] == 1 && board[x][1] == 1 && board[x][2] == 0) { moveX = x; moveY = 2; block = 1; }
          if (board[x][0] == 1 && board[x][1] == 0 && board[x][2] == 1) { moveX = x; moveY = 1; block = 1; }
          if (board[x][0] == 0 && board[x][1] == 1 && board[x][2] == 1) { moveX = x; moveY = 0; block = 1; }
    
        }
        
        for (int y = 0; y < 3 ; y = y + 1) {
    
          if (board[0][y] == 1 && board[1][y] == 1 && board[2][y] == 0) { moveX = 2; moveY = y; block = 1; }
          if (board[0][y] == 1 && board[1][y] == 0 && board[2][y] == 1) { moveX = 1; moveY = y; block = 1; }
          if (board[0][y] == 0 && board[1][y] == 1 && board[2][y] == 1) { moveX = 0; moveY = y; block = 1; }
    
        }
    
    
        if (board[2][0] == 1 && board[1][1] == 1 && board[0][2] == 0) { moveX = 0; moveY = 2; block = 1; }
        if (board[2][0] == 1 && board[1][1] == 0 && board[0][2] == 1) { moveX = 1; moveY = 1; block = 1; }
        if (board[2][0] == 0 && board[1][1] == 1 && board[0][2] == 1) { moveX = 2; moveY = 0; block = 1; }
    
        if (board[0][0] == 1 && board[1][1] == 1 && board[2][2] == 0) { moveX = 2; moveY = 2; block = 1; }
        if (board[0][0] == 1 && board[1][1] == 0 && board[2][2] == 1) { moveX = 1; moveY = 1; block = 1; }
        if (board[0][0] == 0 && board[1][1] == 1 && board[2][2] == 1) { moveX = 0; moveY = 0; block = 1; }
        
        if (block == 1) {
        
            board[moveX][moveY] = 2;
            someoneHadATurn = 1;
    
        }
        else {
  
          while (someoneHadATurn == 0) {
            
            byte randomX = random(0, 3);  // a random number between 0 and 2
            byte randomY = random(0, 3);  // a random number between 0 and 2
    
            if (board[randomX][randomY] == 0) {
          
              board[randomX][randomY] = 2;
              someoneHadATurn = 1;
    
            }
  
          }
  
        }
  
      }

    }


    if (someoneHadATurn == 1) {

  
      checkForWinner();


      // If the current player has not won then it's the other players turn ..
      
      if (showWinner == 0) { 

        if (whosTurn == 1) {
          whosTurn = 2;
        }
        else {
          whosTurn = 1;
        }
           
      }

    }



  }
    

  // Should we show the winner or draw message ?
  
  if (showWinner != 0) {

    if (showWinner == 1 or showWinner == 2) {
      
      arduboy.setCursor(80, 12);
      arduboy.print("Winner !");
  
      if (showWinner == 1) { Sprites::drawOverwrite(93, 30, cross, 0); }
      if (showWinner == 2) { Sprites::drawOverwrite(93, 30, nought, 0); }

    }
    else {
      
      arduboy.setCursor(80, 12);
      arduboy.print(" Draw !");

    }

    if (arduboy.justPressed(B_BUTTON)) {

      showWinner = 0;
      clearBoard();
  

      // The loser can start the next game ..
      
      if (whosTurn == 1) {
        whosTurn = 2;
      }
      else {
        whosTurn = 1;
      }
      
    }
    
  }


  // Update the screen ..

  arduboy.display();
  
}


